{
  "language": "Solidity",
  "sources": {
    "contracts/Box.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\n/**\n * @notice This is a default implementation contract that will be associated with a proxy\n *\n */\ncontract Box {\n    uint256 internal value;\n\n    event UpdateValue(uint256 updatedValue);\n\n    function setValue(uint256 newValue) public {\n        value = newValue;\n\n        emit UpdateValue(value);\n    }\n\n    function getValue() public view returns (uint256) {\n        return value;\n    }\n\n    function version() public pure returns (uint256) {\n        return 1;\n    }\n}\n"
    },
    "contracts/BoxV2.sol": {
      "content": "//SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.7;\n\n/**\n * @notice BoxV2 is a new implementation contract where we change the logic for value\n * @notice We will try to change implementation of a Proxy contract to this BoxV2\n */\n\ncontract BoxV2 {\n    uint256 internal value;\n\n    event UpdateValue(uint256 updatedValue);\n\n    function setValue(uint256 newValue) public {\n        value = newValue + 2;\n        emit UpdateValue(value);\n    }\n\n    function getValue() public view returns (uint256) {\n        return value;\n    }\n\n    function increment() public {\n        value += 2;\n\n        emit UpdateValue(value);\n    }\n\n    function version() public pure returns (uint256) {\n        return 2;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}